/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.Main;
import Controller.SQLite;
import Model.Product;
import Model.User;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
//import.java.time.LocalDataTime;


/**
 *
 * @author beepxD
 */
public class MgmtProduct extends javax.swing.JPanel {

    public SQLite sqlite;
    public DefaultTableModel tableModel;
    public User user;
//    public Main main;
    
    public MgmtProduct(SQLite sqlite) {
        initComponents();
        this.sqlite = sqlite;
        tableModel = (DefaultTableModel)table.getModel();
        table.getTableHeader().setFont(new java.awt.Font("SansSerif", java.awt.Font.BOLD, 14));

//        UNCOMMENT TO DISABLE BUTTONS
//        purchaseBtn.setVisible(false);
//        addBtn.setVisible(false);
//        editBtn.setVisible(false);
//        deleteBtn.setVisible(false);
    }
    
    // added functions
    public void getUser(User user){
        this.user = user;
    }

    public void init(){
        //      CLEAR TABLE
        for(int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--){
            tableModel.removeRow(0);
        }
        
//      LOAD CONTENTS
        ArrayList<Product> products = sqlite.getProduct();
        for(int nCtr = 0; nCtr < products.size(); nCtr++){
//            int x = 1;
            
            if (user.getRole() == 2) {                
                 if (products.get(nCtr).getStock() != 0) {
                     tableModel.addRow(new Object[]{
                        products.get(nCtr).getName(), 
                        products.get(nCtr).getStock(), 
                        products.get(nCtr).getPrice()});
                 }
            }
            
            else {
               tableModel.addRow(new Object[]{
                products.get(nCtr).getName(), 
                products.get(nCtr).getStock(), 
                products.get(nCtr).getPrice()}); 
            }




//            tableModel.addRow(new Object[]{
//                products.get(nCtr).getName(), 
//                products.get(nCtr).getStock(), 
//                products.get(nCtr).getPrice()}); 
            
        }
        
        if (user.getRole() == 2) {
            addBtn.setVisible(false);
            editBtn.setVisible(false);
            deleteBtn.setVisible(false);
        }
        
        if (user.getRole() == 3) {
            purchaseBtn.setVisible(false);
        }
        
        if (user.getRole() == 4) {
            purchaseBtn.setVisible(false);
        }
    }
    
    public void designer(JTextField component, String text){
        component.setSize(70, 600);
        component.setFont(new java.awt.Font("Tahoma", 0, 18));
        component.setBackground(new java.awt.Color(240, 240, 240));
        component.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        component.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), text, javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12)));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        purchaseBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();

        table.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Stock", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(24);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(50);
            table.getColumnModel().getColumn(1).setMaxWidth(100);
            table.getColumnModel().getColumn(2).setMaxWidth(100);
        }

        purchaseBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        purchaseBtn.setText("PURCHASE");
        purchaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseBtnActionPerformed(evt);
            }
        });

        addBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        editBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        editBtn.setText("EDIT");
        editBtn.setToolTipText("");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(purchaseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(editBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(purchaseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void purchaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseBtnActionPerformed
        if(table.getSelectedRow() >= 0){
            JTextField stockFld = new JTextField("0");
            designer(stockFld, "PRODUCT STOCK");

            Object[] message = {
                "How many " + tableModel.getValueAt(table.getSelectedRow(), 0) + " do you want to purchase?", stockFld
            };

            int result = JOptionPane.showConfirmDialog(null, message, "PURCHASE PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

            if (result == JOptionPane.OK_OPTION) {
                if(sqlite.DEBUG_MODE == 1)
                    System.out.println(stockFld.getText());
                
                try{
                    int checkInt;
                    checkInt = Integer.parseInt(stockFld.getText());
                }
                catch(Exception ex)
                {
                   JOptionPane.showMessageDialog(null, "Product not bought. Please input an acceptable number.", "Error: Expected integer input", JOptionPane.ERROR_MESSAGE);
                   return; //exit function
                }
                int purchase = Integer.parseInt(stockFld.getText());
                int current_stock = Integer.parseInt(tableModel.getValueAt(table.getSelectedRow(), 1).toString());
                int new_stock = current_stock - purchase;
                
                if (purchase <= 0) {
                    JOptionPane.showMessageDialog(null, "Please input a number greater than 0", "Error: Invalid Input", JOptionPane.ERROR_MESSAGE);
                }
                
                else if (new_stock < 0) {
                    JOptionPane.showMessageDialog(null, "Not Enough Stock", "Error: Invalid Input", JOptionPane.ERROR_MESSAGE);
                }
                
                else {
                    ArrayList<Product> products = sqlite.getProduct();
            
                    for(int nCtr = 0; nCtr < products.size(); nCtr++){                        
                        String a = tableModel.getValueAt(table.getSelectedRow(), 0).toString();
                        if (a.equals(products.get(nCtr).getName()) == true) {
                            sqlite.purchaseProduct(a, new_stock);
                            sqlite.addHistory(user.getUsername(), a, purchase, null);
                            this.init();
                            break;
                        }
                    }
                }  
            }
        }
    }//GEN-LAST:event_purchaseBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        JTextField nameFld = new JTextField();
        JTextField stockFld = new JTextField();
        JTextField priceFld = new JTextField();

        designer(nameFld, "PRODUCT NAME");
        designer(stockFld, "PRODUCT STOCK");
        designer(priceFld, "PRODUCT PRICE");

        Object[] message = {
            "Insert New Product Details:", nameFld, stockFld, priceFld
        };

        int result = JOptionPane.showConfirmDialog(null, message, "ADD PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

        if (result == JOptionPane.OK_OPTION) {
            if(sqlite.DEBUG_MODE == 1){
                System.out.println(nameFld.getText());
                System.out.println(stockFld.getText());
                System.out.println(priceFld.getText());
            }
            
            try{
                int checkInt;
                
                checkInt = Integer.parseInt(stockFld.getText());
            }
            catch(Exception ex)
            {
               JOptionPane.showMessageDialog(null, "Product not added. Please input an acceptable stock number.", "Error: Expected integer input", JOptionPane.ERROR_MESSAGE);
               return; //exit function
            }
            
            try{
                float checkFloat;
                
                checkFloat = Float.parseFloat(priceFld.getText());
            }
            catch(Exception ex)
            {
               JOptionPane.showMessageDialog(null, "Product not added. Please input an acceptable price.", "Error: Expected float input", JOptionPane.ERROR_MESSAGE);
               return; //exit function
            }
            int x = Integer.parseInt(stockFld.getText());
            float y = Float.parseFloat(priceFld.getText());
            String z = nameFld.getText();
            
//            System.out.println(x);

            ArrayList<Product> products = sqlite.getProduct();
            int check = 0;
            
            for(int nCtr = 0; nCtr < products.size(); nCtr++){
                String a = nameFld.getText().toLowerCase();
                
                if (a.equals(products.get(nCtr).getName().toLowerCase()) == true) {
                    check = 1;
                    JOptionPane.showMessageDialog(null, "Please input a different product name", "Error: Product Name Already Exists", JOptionPane.ERROR_MESSAGE);
                }
            }
            
//            JOptionPane.showMessageDialog(null, "NONO", "YESYES", JOptionPane.ERROR_MESSAGE);
            
            if (check == 0) {
                sqlite.addProduct(z, x, y);
                this.init();
            }            
        }
        
        
    }//GEN-LAST:event_addBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        if(table.getSelectedRow() >= 0){
            JTextField nameFld = new JTextField(tableModel.getValueAt(table.getSelectedRow(), 0) + "");
            JTextField stockFld = new JTextField(tableModel.getValueAt(table.getSelectedRow(), 1) + "");
            JTextField priceFld = new JTextField(tableModel.getValueAt(table.getSelectedRow(), 2) + "");
            int b = 0;
            
            // added 
            ArrayList<Product> products = sqlite.getProduct();
            
            for(int nCtr = 0; nCtr < products.size(); nCtr++){
                String a = nameFld.getText();
                
//                tableModel.addRow(new Object[]{
//                    products.get(nCtr).getName(), 
//                    products.get(nCtr).getStock(), 
//                    products.get(nCtr).getPrice()});
                if (a.equals(products.get(nCtr).getName()) == true) {
                    b = products.get(nCtr).getId();
                }
            }
            

            designer(nameFld, "PRODUCT NAME");
            designer(stockFld, "PRODUCT STOCK");
            designer(priceFld, "PRODUCT PRICE");

            Object[] message = {
                "Edit Product Details:", nameFld, stockFld, priceFld
            };

            int result = JOptionPane.showConfirmDialog(null, message, "EDIT PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

            if (result == JOptionPane.OK_OPTION) {
                if(sqlite.DEBUG_MODE == 1){
                    System.out.println(nameFld.getText());
                    System.out.println(stockFld.getText());
                    System.out.println(priceFld.getText());
                    System.out.println(b);
                }
            try{
            int checkInt;

            checkInt = Integer.parseInt(stockFld.getText());
            }
            catch(Exception ex)
            {
               JOptionPane.showMessageDialog(null, "Product not added. Please input an acceptable stock number.", "Error: Expected integer input", JOptionPane.ERROR_MESSAGE);
               return; //exit function
            }

            try{
                float checkFloat;

                checkFloat = Float.parseFloat(priceFld.getText());
            }
            catch(Exception ex)
            {
               JOptionPane.showMessageDialog(null, "Product not added. Please input an acceptable price.", "Error: Expected float input", JOptionPane.ERROR_MESSAGE);
               return; //exit function
            }

            int x = Integer.parseInt(stockFld.getText());
            float y = Float.parseFloat(priceFld.getText());
            String z = nameFld.getText();

//                sqlite.editProduct(z, x, y);
            sqlite.editProduct(z, x, y, b);

//                for(int nCtr = 0; nCtr < products.size(); nCtr++){
//                    if (b == products.get(nCtr).getId()) {
////                        products.get(nCtr).setName(z);
////                        products.get(nCtr).setPrice(y);
////                        products.get(nCtr).setStock(x);
//                        sqlite.editProduct(z, x, y);
//                        
////                      add how to edit function
//
//                        System.out.println(nameFld.getText());
//                        System.out.println(stockFld.getText());
//                        System.out.println(priceFld.getText());
                    this.init();
//                    }
//                }
                
            }
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        if(table.getSelectedRow() >= 0){
            int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + tableModel.getValueAt(table.getSelectedRow(), 0) + "?", "DELETE PRODUCT", JOptionPane.YES_NO_OPTION);
            
            if (result == JOptionPane.YES_OPTION) {
                if(sqlite.DEBUG_MODE == 1)
                    System.out.println(tableModel.getValueAt(table.getSelectedRow(), 0));
                
                String z = tableModel.getValueAt(table.getSelectedRow(), 0).toString();
                
                sqlite.deleteProduct(z);
                
                this.init();
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton purchaseBtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
